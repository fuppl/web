<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

<!--    配置spring ioc 把service对象配置进来-->
    <bean id="accountService" class="com.example.service.impl.AccountServiceImpl"/>

<!--   todo spring中基于XML的aop配置步骤
        1 把通知Bean也交给spring来管理
        2 使用 aop:config 标签表明开始aop配置
        3 使用 aop:aspect 标签表明开始配置切面
            属性：
                id：给切面提供一个唯一标志
                ref：指定通知类bean的id
        4 在aspect内部使用对应的标签配置通知的类型
            让logger中的printLog方法在切入点方法执行前执行，所以是前置通知
            使用aop:before：表示配置前置通知
                method 属性用于指定Logger中哪个方法时前置通知
                pointcut 属性用于指定切入点表达式，该表达式的含义是指定对业务层那些方法增强
                    切入点表达式写法：
                        关键字：execution(表达式)
                        表达式写法：
                            访问修饰符 返回值 包名.类名.方法名(参数列表)
            标准的表达式写法
                public void com.example.service.impl.AccountServiceImpl.saveAccount()
            访问修饰符可以省略
                void com.example.service.impl.AccountServiceImpl.saveAccount()
            返回值可以使用 * ，表示任意返回值
                * com.example.service.impl.AccountServiceImpl.saveAccount()
            包名可以使用通配符，注意，有几个包写几个 *.
                * *.*.*.*.AccountServiceImpl.saveAccount()
            包名可以使用 *.. 表示当前包及其子包
                * *..AccountServiceImpl.saveAccount()
            类名和方法名都可以用通配符
                * *..*.*()
            参数列表
                可以直接写数据类型：
                    基本类型写名称             int
                    引用类型写包名.类名的方式  java.lang.String
                可以使用通配符表示任意类型，但是必须有参数
                可以使用 .. 表示有无参数均可，有参数可以是任意类型
            全通配写法：
                * *..*.*(..)
            实际开发中切入点表达式的通常写法：
                切到业务层实现类的所有方法
                    * com.example.service.impl.*.*(..)
-->
<!--    1 配置Logger类-->
    <bean id="logger" class="com.example.utils.Logger"/>
<!--    2 配置aop-->
    <aop:config>
<!--        配置切面-->
        <aop:aspect id="logAdvice" ref="logger">
<!--            配置通知类型，并建立通知方法于切入点的关联-->
            <aop:before method="printLog" pointcut="execution(* com.example.service.impl.*.*(..))"/>
        </aop:aspect>
    </aop:config>
</beans>