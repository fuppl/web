<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--todo namespace里填dao位置-->
<mapper namespace="com.example.dao.UserDao">
<!--    方法二：配置查询结果的列名与实体类的属性名的对应关系-->
    <resultMap id="userMap" type="com.example.entity.User">
<!--        先写主键字段的对应-->
        <id property="userId" column="id"/>
<!--        其他字段-->
        <result property="userAddress" column="address"/>
        <result property="userName" column="username"/>
        <result property="userSex" column="sex"/>
    </resultMap>
<!--    查询所有-->
<!--    todo 当指定方法二时，使用resultMap-->
    <select id="findAll" resultMap="userMap">
        <!-- 方法一：起别名 -->
        <!--SELECT id as userId ,username as userName, address as userAddress,sex as userSex from user-->
        select * from user
    </select>
<!--    保存用户-->
    <insert id="saveUser" parameterType="com.example.entity.User">
        <!-- 配置插入操作后获取插入数据的id;keyProperty应该被生成的目标属性，对应实体类, keyColumn与数据库列名，对应表，order表示插入之后执行-->
        <selectKey keyProperty="userId" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id()
        </selectKey>
        insert into user(username,address,sex) values (#{userName},#{userAddress},#{userSex})
    </insert>
<!--    更新用户-->
    <update id="updateUser" parameterType="com.example.entity.User">
        update user set username=#{userName},address=#{userAddress},sex=#{userSex} where id=#{userId}
    </update>
<!--    删除用户,此处花括号里可任意填写，因为值有一个参数吗，只作为占位符使用-->
    <delete id="deleteUser" parameterType="Integer">
        delete from user where id=#{userId}
    </delete>
<!--    根据id查询用户-->
    <select id="findById" parameterType="int" resultMap="userMap">
        select * from USER where id=#{userId}
    </select>
<!--    根据用户名查询用户,有两种写法，第二种value为固定写法，不可更改 -->
    <select id="findByName" parameterType="String" resultMap="userMap">
        <!-- select * from user where username like #{name} -->
        select * from user where username like '%${value}%'
    </select>
<!--    查询用户总数-->
    <select id="findTotal" resultType="int">
        select count(id) from user
    </select>
<!--    根据queryVo中的条件查询用户-->
    <select id="findUserByVo" parameterType="com.example.entity.QueryVo" resultMap="userMap">
        select * from user where username like #{user.userName}
    </select>
</mapper>